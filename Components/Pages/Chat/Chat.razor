@page "/"
@using System.ComponentModel
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion
@using FormVisualizer.Services
@inject NavigationManager Nav

@inject Kernel Kernel
@implements IDisposable

<PageTitle>Chat</PageTitle>

<ChatHeader OnNewChat="@ResetConversationAsync" />

<div style="display: flex; height: calc(100vh - 60px); margin-top: 60px; box-sizing: border-box;">
    <div style="flex: 2; padding: 1rem; overflow: hidden; display: flex; align-items: center; justify-content: center;">
        <iframe @ref="formIframe" id="dataverseIframe"
                src="@iframeSrc"
                style="width: 80%; height: 80%; border: 1px solid #ccc; box-sizing: border-box;"
                title="Form Preview">
        </iframe>
    </div>

    <div id="aiChatDiv" style="flex: 1; display: flex; flex-direction: column; padding: 1rem; padding-left: 0; padding-bottom: 0; min-width: 400px; overflow: hidden; height: 100%;">
        <div style="flex: 1; overflow-y: auto; min-height: 0; margin-bottom: 0.5rem;">
            <ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">
                <NoMessagesContent>
                    <div>Welcome to the form customization assistant!.</div>
                </NoMessagesContent>
            </ChatMessageList>
        </div>

        <div class="chat-container" style="flex-shrink: 0; overflow: visible; max-height: 200px; padding-bottom: 1rem;">
            <ChatSuggestions OnSelected="@AddUserMessageAsync" @ref="@chatSuggestions" />
            <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />
            <SurveyPrompt /> @* Remove this line to eliminate the template survey message *@
        </div>
    </div>
</div>

@code {
    private const string SystemPrompt = @"
       You are a helpful assistant that have access to tools to help the user do customizations in Dataverse.
        ";

    private readonly List<ChatMessage> messages = new();
    private CancellationTokenSource? currentResponseCancellation;
    private ChatMessage? currentResponseMessage;
    private ChatInput? chatInput;
    private ChatSuggestions? chatSuggestions;
    private ElementReference formIframe;
    private string iframeSrc = "https://org41df0750.crm4.dynamics.com/";

    protected override void OnInitialized()
    {
        messages.Add(new(ChatRole.System, SystemPrompt));
    }

    private async Task AddUserMessageAsync(ChatMessage userMessage)
    {
        CancelAnyCurrentResponse();

        PromptExecutionSettings settings = new() { FunctionChoiceBehavior = FunctionChoiceBehavior.Auto() }; 

        var chatCompletionService = Kernel.GetRequiredService<IChatCompletionService>();

        // Add the user message to the conversation
        messages.Add(userMessage);
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();

        // Stream and display a new response from the IChatClient
        var responseText = new Microsoft.Extensions.AI.TextContent("");
        currentResponseMessage = new ChatMessage(ChatRole.Assistant, [responseText]);
        currentResponseCancellation = new();
        await foreach (var update in chatCompletionService.GetStreamingChatMessageContentsAsync(ChatHistoryHelper.ToChatHistory(messages), settings, Kernel, currentResponseCancellation.Token))
        {
            messages.AddMessages(update.ToChatResponseUpdate(), filter: c => c is not Microsoft.Extensions.AI.TextContent);
            responseText.Text += update.Content;
            ChatMessageItem.NotifyChanged(currentResponseMessage);
            StateHasChanged(); // Trigger UI update for streaming
        }

        // Store the final response in the conversation, and begin getting suggestions
        messages.Add(currentResponseMessage!);
        currentResponseMessage = null;
        chatSuggestions?.Update(messages);
    }

    private void CancelAnyCurrentResponse()
    {
        // If a response was cancelled while streaming, include it in the conversation so it's not lost
        if (currentResponseMessage is not null)
        {
            messages.Add(currentResponseMessage);
        }

        currentResponseCancellation?.Cancel();
        currentResponseMessage = null;
    }

    private async Task ResetConversationAsync()
    {
        CancelAnyCurrentResponse();
        messages.Clear();
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();
    }

    private void SetIframeSrc(string newSrc)
    {
        iframeSrc = newSrc;
        StateHasChanged();
    }

    private async Task RefreshIframeAsync()
    {
        var currentSrc = iframeSrc;
        iframeSrc = "about:blank";
        StateHasChanged();
        await Task.Delay(100);
        iframeSrc = currentSrc;
        StateHasChanged();
    }

    public void Dispose()
        => currentResponseCancellation?.Cancel();
}
